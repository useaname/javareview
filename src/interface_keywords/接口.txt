因为接口是定义多个类共同的行为规范，因此接口里所有的成员，包括常量，方法，内部类和枚举类都是public访问权限。定义接口成员时，可以省略访问控制
接口。特殊的抽象类。不能包含普通方法，接口里所有方法只有抽象方法。
修饰符，如果指定，只能是public。
接口里定义的方法 只能是抽象方法，系统会自动增加abstract修饰符，因此接口里不允许定义静态方法。不管定义接口里方法时是否使用public abstract
修饰 接口里的方法总是使用public abstract。

从某个角度来看，接口可以被当成一个特殊的类，因此一个Java源文件里最多只能有一个public接口，如果一个Java源文件里定义了一个public
接口，则该源文件的主文件名必须与该接口相同。

接口的继承与类的继承不一样，接口支持多继承，即一个接口可以有多个直接父接口。和类继承相似，子类接口扩展某个父类接口，将会获得父类接口里定义的所有
抽象方法，常量属性，内部类和枚举类定义。

接口不能创建实例，但接口可以用于声明引用类型的变量。这个引用类型的变量必须引用到其实现类的对象。除此之外，接口主要用途就是被实现类实现
一个类可以实现多个接口，这是java为单继承灵活性不做所做的补充。

接口不能显示的继承任何类，但所有接口类型的引用变量都可以直接赋值给Object类型的引用变量。这是利用向上类型转换来实现的。

接口和抽象类。
接口和抽象类具有如下特征：
--》接口和抽象类都不能被实例化，他们都位于继承树的顶端，用于被其他类实现和继承。
--》接口和抽象类都可以包含抽象方法，实现接口或继承抽象类的普通子类都必须实现这些抽象方法。
接口和抽象类之间的差别非常大，这种差别主要体现在设计上。
两者设计上的差别如下：

接口作为系统与外界交互的窗口，接口体现是一种规范。对于接口的实现者而言，接口规定了实现者必须向外提供哪些服务(以方法的形式来提供)；对于接口调用者
而言，接口规定了调用者可以调用哪些服务，以及如何调用这些服务（就是如何来调用方法的）。当一个程序中使用接口时，接口是多个模块之间的耦合标准；当多
个应用程序之间使用时，接口时多个程序之间的通信标准。
从某种程度来说，接口类型整个系统中的“总纲”，它制定了系统之间各个模块应该遵循的标准，因此一个系统中的接口不应该经常改变。一旦接口改变，对整个系统
甚至其他系统的影响将是辐射式的，导致系统中大部分类需要重写。
抽象类则不一样，抽象类作为系统中多个子列共同的父类，它所体现的是一种模板设计。抽象做为多个子类的抽象父类，可以被当场系统实现过程中的中间产品，这
个中间产品已经实现类系统的部分功能（那些已经提供实现的方法），但这个产品依然不能当成最终产品，必须有更进一步的完善，这种完善可能有几种不同方式。
除此之外，接口和抽象类在用法也存在如下差别：
--》接口只能包含抽象方法，不包含已经提供实现的方法；抽象类则完全可以包含普通方法。
--》接口里不能定义静态方法；抽象类里可以静态方法。
--》接口里只能定义静态常量属性，不能定义普通属性；抽象类则即可以定义普通属性，也可以定义静态常量属性。
--》接口里不包含构造器；抽象类里可以包含构造器，抽象类里的构造器并不是用于创建对象，而让其子类调用这些构造器来晚上属于抽象类的初始化操作。
--》接口里不能包含初始块块，但抽象类则完全可以包含初始坏块。
--》一个类最多只能一个直接父类，包括以抽象类；但一个类可以直接实现多个接口，通过实现多个接口可以弥补Java但继承的不足。

面向接口的编程

命令模式 工厂模式