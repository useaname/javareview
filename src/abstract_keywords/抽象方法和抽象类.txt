抽象方法和抽象类
	抽象方法和抽象类必须使用abstract修饰符来定义，有抽象方法类只能被定义成抽象类，抽象类可以没有抽象方法。
	抽象方法和抽象类的使用规则如下：
	-》抽象类必须使用abstract修饰符来修饰，抽象方法也必须使用abstract修饰符来修饰，抽象方法不能有方法体。
	-》抽象类不能为被实例化，无法使用new关键字调用抽象类的构造器创建抽象类的实例。即使抽象类不包含抽象方法，这个抽象类也不能创建实例。
	-》抽象类可以包含属性，方法（普通方法和抽象方法都可以），构造器，初始化块，内部类，枚举类六种成分。抽象类的构造器不能创建实例，主要
	       用户被其子类调用。
	-》含有抽象方法的类（包括直接定义了一个抽象方法；继承了一个抽象父类，但没有完全实现父类包含的抽象方法；以及实现类一个接口，但没有
	       完全实现接口包含的方法三种情况）只能被定义成抽象类。

	抽象类同样能包含和普通类相同的成员。只是抽象类不能用于创建实例；普通类不能包含抽象方法，而抽象类可以包含抽象方法。
	abstract不能用于修饰属性，不能用于修饰局部变量，即没有抽象属性等说法；abstract也不能用于修饰构造器，没有抽象
	构造器。抽象类里定义构造器只能是普通构造器。
	使用static修饰的方法是表明这个方法属于当前这个类，即该方法可以通过类来调用，如果该方法被定义成抽象方法，则将导致
	通过该类来调用方法时出现错误（调用了一个没有方法体的方法肯定会引起错误），因此static和abstract不能同时修饰某个
	方法。
	
	abstract关键字修饰的方法必须被子类重写才有意义，否则这个方法将永远不会有方法体，因此abstract方法不能定义为
	private访问权限，即private和abstract不能同时使用。
	
	
	抽象类体现的就是一种模板模式的设计，父类提供许多简单的方法，并把一个或多个方法留给其子类实现，这就是一种模板模式，
	模板模式是最常见，最简单的设计模式之一，
		
	